;
; Loosely based on the RPi st7789 example
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
; Changes copyright (c) 2021 Michael Bell
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program st7789_lcd
.side_set 2

; This transmits 32-bit DMA'd data of the form:
; Header: | 24 bits         | 8 bits  |
;         | Data bit count  | Command |
; Data: (data bit count)/8 data bytes
; Bytes are sent from MSB first, so the last word should be right aligned
; if the data byte count isn't a multiple of 4.
; If the data byte count is not a multiple of 4 then the remaining part
; of the word is discarded.
; If no data is to be sent "data bit count" should be 1, else it should
; be the number of bits to be sent.

; Data on OUT pin 0
; Clock on side-set pin 1
; CS on side-set pin 0
; D/C on SET pin 0

    set pins, 0         side 0b01  ; Set D/C to command
next_cmd:
    set y, 7            side 0b01  ; Send 8 bit command
discard:
    out x, 24           side 0b01  ; Read data length
    jmp x--, cmd_loop   side 0b01  ; Discard if we just read all zeros
    jmp discard         side 0b01

cmd_loop:
    out pins, 1         side 0b00
    jmp y--, cmd_loop   side 0b10

    jmp !x, next_cmd    side 0b00  ; If no data go to next command

    set pins, 1         side 0b00  ; Set D/C to data
data_loop:                         ; Send data
    out pins, 1         side 0b00  
    jmp x--, data_loop  side 0b10
 

% c-sdk {

static inline void st7789_lcd_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint cs_pin, uint dc_pin, float clk_div) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, cs_pin);
    pio_gpio_init(pio, cs_pin + 1);
    pio_gpio_init(pio, dc_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, dc_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, cs_pin, 2, true);
    pio_sm_config c = st7789_lcd_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, cs_pin);
    sm_config_set_out_pins(&c, data_pin, 1);
    sm_config_set_set_pins(&c, dc_pin, 1);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, false, true, 32);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// SM is done when it stalls on an empty FIFO

static inline void st7789_lcd_wait_idle(PIO pio, uint sm) {
    uint32_t sm_stall_mask = 1u << (sm + PIO_FDEBUG_TXSTALL_LSB);
    pio->fdebug = sm_stall_mask;
    while (!(pio->fdebug & sm_stall_mask))
        ;
}
%}
